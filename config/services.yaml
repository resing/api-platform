# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\DataPersister\UserDataPersister:
        bind:
            $decoratedDataPersister: '@api_platform.doctrine.orm.data_persister'

    App\Serializer\AdminGroupContextBuilder:
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Serializer\AdminGroupContextBuilder.inner' ]

    App\Doctrine\OrderSetOwnerListener:
        tags: [ doctrine.orm.entity_listener ]

    App\Service\LoadData\UsersLoadData: ~
    App\Service\LoadData\OrdersLoadData: ~
    App\Service\LoadData\ProductsLoadData: ~

    App\Service\LoadData\LoadDataInterface $transformer: '@App\Service\LoadData\UsersLoadData'
    App\Service\LoadData\LoadDataInterface: '@App\Service\LoadData\OrdersLoadData'
    App\Service\LoadData\LoadDataInterface $productTransformer: '@App\Service\LoadData\ProductsLoadData'

    App\Command\ExportDataCommand:
        arguments:
            $exportData: !tagged_iterator export.data # Inject all services tagged with "scoring.factor"
            $directory: '%kernel.project_dir%/public/exports'
            $exportLog: !tagged_iterator export.log
        tags:
            - { name: 'console.command' }

